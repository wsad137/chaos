package chaos.core.dao;

import chaos.core.model.SAccount;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.ResultMap;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.Update;

public interface SAccountMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table s_account
     *
     * @mbg.generated
     */
    @Delete({
            "delete from s_account",
            "where id = #{id,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table s_account
     *
     * @mbg.generated
     */
    @Insert({
        "insert into s_account (nickname, username, ",
        "password, status, ",
        "u_id, token, l_t, ",
        "ut, ct)",
        "values (#{nickname,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, ",
        "#{password,jdbcType=VARCHAR}, #{status,jdbcType=SMALLINT}, ",
        "#{uId,jdbcType=VARCHAR}, #{token,jdbcType=VARCHAR}, #{lT,jdbcType=BIGINT}, ",
        "#{ut,jdbcType=BIGINT}, #{ct,jdbcType=BIGINT})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=String.class)
    int insert(SAccount record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table s_account
     *
     * @mbg.generated
     */
    int insertSelective(SAccount record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table s_account
     *
     * @mbg.generated
     */
    @Select({
        "select",
        "id, nickname, username, password, status, u_id, token, l_t, ut, ct",
        "from s_account",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    @ResultMap("chaos.core.dao.SAccountMapper.BaseResultMap")
    SAccount selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table s_account
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(SAccount record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table s_account
     *
     * @mbg.generated
     */
    @Update({
        "update s_account",
        "set nickname = #{nickname,jdbcType=VARCHAR},",
          "username = #{username,jdbcType=VARCHAR},",
          "password = #{password,jdbcType=VARCHAR},",
          "status = #{status,jdbcType=SMALLINT},",
          "u_id = #{uId,jdbcType=VARCHAR},",
          "token = #{token,jdbcType=VARCHAR},",
          "l_t = #{lT,jdbcType=BIGINT},",
          "ut = #{ut,jdbcType=BIGINT},",
          "ct = #{ct,jdbcType=BIGINT}",
        "where id = #{id,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(SAccount record);


    @Select({
            "select",
            "id, nickname, username, password, status, u_id, token, l_t, ut, ct",
            "from s_account",
            "where username = #{username,jdbcType=VARCHAR}"
    })
    @ResultMap("chaos.core.dao.SAccountMapper.BaseResultMap")
    SAccount selectByUserName(String username);

    @Select({
            "select",
            "id, nickname, username, password, status, u_id, token, l_t, ut, ct",
            "from s_account",
            "where username = #{username,jdbcType=VARCHAR}"
    })
    @ResultMap("chaos.core.dao.SAccountMapper.BaseResultMapExt")
    SAccount selectByUserNameExt(String username);
}